@page "/"
@using ApiGatewayBlazor.Client.Models.Entidad
@using ApiGatewayBlazor.SqlServer.Models.Entities;
@inject HttpClient httpClient

<PageTitle>Catalogo de Productos</PageTitle>

<h1>Productos</h1>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Id</th>
            <th>Nombre</th>
            <th>Descripcion</th>
            <th>Precio</th>
            <th>CantidadStock</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (Producto producto in productos)
        {
            <tr>
                <td>@producto.Id</td>
                <td>@producto.Nombre</td>
                <td>@producto.Descripcion</td>
                <td>@producto.Precio</td>
                <td>@producto.CantidadStock</td>
                <td>
                    <button type="button" class="btn btn-success">Like</button>
                    <button type="button" class="btn btn-danger">Dislike</button>
                </td>
                <td>
                    <button type="button" class="btn btn-primary" @onclick="() => AgregarAlCarrito(producto)">+</button>
                </td>
            </tr>
        }
    </tbody>

</table>
<button type="button" class="btn btn-success" @onclick="RealizarCompra">Comprar</button>
<br />
<h2>Total: @totalCompra</h2>

@code {
    List<Producto> productos = new List<Producto>();
    decimal totalCompra = 0;
    Dictionary<int, int> carrito = new Dictionary<int, int>();
    int idCliente = 1; 

    protected override async Task OnInitializedAsync()
    {
        await BuscarProductos();
    }

    private async Task BuscarProductos()
    {
        string apiUrl = "/api/Productos";

        try
        {
            productos = await httpClient.GetFromJsonAsync<List<Producto>>(apiUrl);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private void AgregarAlCarrito(Producto producto)
    {
        if (carrito.ContainsKey(producto.Id))
        {
            carrito[producto.Id]++;
        }
        else
        {
            carrito[producto.Id] = 1;
        }

        totalCompra += producto.Precio;
        producto.CantidadStock--;
    }

    private async Task RealizarCompra()
    {
        foreach (var kvp in carrito)
        {
            var pedido = new Pedidos
                {
                    IdCliente = idCliente,
                    IdProducto = kvp.Key,
                    Cantidad = kvp.Value,
                    Total = totalCompra,
                    Fecha = DateTime.Now
                };

            string apiUrlPedidos = "/api/Pedidos";
            string apiUrlCarrito = "/api/CarritoCompras";

            try
            {
                var responsePedidos = await httpClient.PostAsJsonAsync(apiUrlPedidos, pedido);
                var responseCarrito = await httpClient.PostAsJsonAsync(apiUrlCarrito, pedido);

                if (responsePedidos.IsSuccessStatusCode && responseCarrito.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Successfully added {kvp.Value} units of product with ID {kvp.Key} to the cart.");
                }
                else
                {
                    Console.WriteLine($"Failed to add product with ID {kvp.Key} to the cart. Status code: {responsePedidos.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding to cart: {ex.Message}");
            }
        }

        carrito.Clear();
        totalCompra = 0; 
        await BuscarProductos(); 
    }
}